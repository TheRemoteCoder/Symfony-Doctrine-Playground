security:
  password_hashers:
    Symfony\Component\Security\Core\User\InMemoryUserProvider: bcrypt
    # Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
    #   algorithm: 'bcrypt'
    #   cost: 15

  # https://symfony.com/doc/current/security/experimental_authenticators.html
  enable_authenticator_manager: true

  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    users_in_memory:
      memory:
        users:
          # bcrypt (12 rounds)
          john: { password: '$2a$15$U2qhQeICQ./dvnsfy1mgEeU8kPWVWBC8aVyz8nZloou54EoYTI2tu', roles: ['ROLE_USER'] }
          # plaintext
          # test: { password: 'secret', roles: ['ROLE_USER'] }

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      # Seems to have no effect?
      http_basic:
        realm: 'Secured Area'

      lazy: true
      provider: users_in_memory

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/micropost, roles: ROLE_USER }
    # - { path: ^/profile, roles: ROLE_USER }
    # - { path: ^/admin, roles: ROLE_ADMIN }

    # Not needed, just for demo (e.g. for login forms)
    - { path: ^/blog, roles: PUBLIC_ACCESS }
